# -*- coding:utf-8 -*-import jsonimport sysimport query_pubmedimport xml.etree.ElementTree as ETimport timeimport osimport globimport mail_meAuthorName = dict()SeenAuthor = set()buffer = str()inter_data_path = '../intermediate_data/pubmed/'raw_data_path = '../raw_data/pubmed/'Timeofquery = " AND (\"2002\"[Date - Publication] : \"2014\"[Date - Publication]))"SeedQuery = "((ebola \"humans\"[MeSH Terms])" + Timeofquerydef gettimestamp():    format_type = '%Y_%m_%d_%H_%M_%S'    return time.strftime(format_type, time.localtime(time.time()))def getauthor(XmlData):    xmltree = ET.fromstring(XmlData)    for Author in xmltree.findall(".//Author"):        if Author.find('LastName') != None:            lastname = Author.find('LastName').text        else:            lastname = ''            if Author.find('ForeName') == None:                return        if Author.find('ForeName') != None:            forename = Author.find('ForeName').text        else:            forename = ''        if Author.find('Initials') != None:            initials = Author.find('Initials').text        else:            initials = ''        if Author.find('Suffix') != None:            suffix = Author.find('Suffix').text        else:            suffix = ''        fullname = lastname + ', ' + forename + ' ' + suffix        shortname = lastname + ' ' + initials + ' ' + suffix        AuthorName[fullname] = shortnamedef saveseed(seed):    with open(raw_data_path + 'seed_Article' + gettimestamp() + '.txt', 'w') as SeedArticle:        SeedArticle.writelines(str(seed).replace('\n', ''))        # SeedArticle.writelines(str(seed) + '\n')def savequery(query):    with open(raw_data_path + 'Articles.' + gettimestamp() + '.txt', 'a') as Article:        print('writing ' + raw_data_path + 'Articles.' + gettimestamp() + '.txt')        Article.writelines(query)if len(sys.argv) == 1:    seed = query_pubmed.search(SeedQuery).read()    getauthor(seed)    saveseed(seed)else:    if sys.argv[1] == '-r':        with open(inter_data_path + 'temp_AuthorName.txt', 'r') as Name:            AuthorName = json.loads(Name.read())        with open(inter_data_path + 'temp_Seenlist.txt', 'r') as Seenlist:            for line in Seenlist:                SeenAuthor.add(line.replace('\n', ''))    else:        if sys.argv[1] == '-c':            for path in glob.glob(inter_data_path + '*'):                os.remove(path)            for path in glob.glob(raw_data_path + '*'):                os.remove(path)            print('clean up')            sys.exit(0)        else:            print('illegal input')            sys.exit(0)while True:    for Fname in AuthorName.keys():        if Fname not in SeenAuthor:            query = query_pubmed.search(Fname + "[FAU]" + Timeofquery)            if query == 'no match':                query = query_pubmed.search(AuthorName[Fname] + "[AU]" + Timeofquery)            if not query == 'no match':                result = query.read()                getauthor(result)            buffer += result.replace('\n', '') + '\n'            if len(SeenAuthor) % 1000 == 0:                savequery(buffer)                buffer = ''            SeenAuthor.add(Fname)        print('work on %d in %d' % (len(SeenAuthor), len(AuthorName)))        if len(SeenAuthor) == len(AuthorName):            print('the end~~~~')            sys.exit(0)